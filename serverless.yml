service: syncify
provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

package:
  individually: true

custom:
  # 'dev' locally, 'prod' when deployed with serverless --stage prod
  stage: ${opt:stage, 'dev'}

functions:
  room:
    handler: ./src/api/modules/rooms/handler.showRoom
    name: ${self:provider.stage}-room
    events:
      - http:
          path: api/rooms/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  authorize:
    handler: ./src/api/modules/auth/handler.authorize
    name: ${self:provider.stage}-authorize
    environment:
      USERS_TABLE_NAME: ${self:provider.stage}-users
      SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${env:SPOTIFY_CLIENT_SECRET}
      SPOTIFY_REDIRECT_URL: ${env:SPOTIFY_REDIRECT_URL}
    events:
      - http:
          path: api/authorize
          method: post

resources:
  - Conditions:
      CreateProdResources:
        Fn::Equals:
          - ${self:provider.stage}
          - prod
  - ${file(infrastructure/cloudfront.yml)}
  - ${file(infrastructure/beanstalk-app.yml)}
  - Resources:
      # DynamoDB Table: Rooms
      AssetsBucket:
        Type: AWS::S3::Bucket
        Condition: CreateProdResources
        Properties:
          BucketName: syncify-assets
          AccessControl: PublicRead
      ArtifactsBucket:
        Type: AWS::S3::Bucket
        Condition: CreateProdResources
        Properties:
          BucketName: syncify-artifacts
      UsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.stage}-users
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
